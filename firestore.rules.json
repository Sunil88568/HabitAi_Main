rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function isOwner(uid) { return signedIn() && request.auth.uid == uid; }
    function isYyyyMmDd(s) { return s is string && s.matches('^\\d{4}-\\d{2}-\\d{2}$'); }

    // Users and their scoped data
    match /users/{uid} {
      // Reads allowed for the owner; writes validated per-collection below
      allow read: if isOwner(uid);

      // HABITS
      match /habits/{habitId} {
        // Create requires required fields
        allow create: if isOwner(uid)
          && request.resource.data.name is string
          && request.resource.data.createdAt is timestamp;

        // Update keeps createdAt immutable
        allow update: if isOwner(uid)
          && request.resource.data.name is string
          && resource.data.createdAt == request.resource.data.createdAt;

        // Delete by owner
        allow delete: if isOwner(uid);
      }

      // LOGS  (one doc per day per habit)
      match /logs/{logId} {
        // shared validation used for create/update
        function validLog() {
          return request.resource.data.habitId is string
            && isYyyyMmDd(request.resource.data.dateUTC)
            && request.resource.data.completed is bool
            && request.resource.data.updatedAt is timestamp
            // enforce deterministic ID: "<habitId>_<yyyy-mm-dd>"
            && logId == (request.resource.data.habitId + '_' + request.resource.data.dateUTC)
            // the habit must exist for this user
            && exists(/databases/$(database)/documents/users/$(uid)/habits/$(request.resource.data.habitId));
        }

        allow create: if isOwner(uid) && validLog();

        // On update, keep id scheme + types + habit existence, and make updatedAt monotonic
        allow update: if isOwner(uid) && validLog()
          && request.resource.data.updatedAt >= resource.data.updatedAt;

        allow delete: if isOwner(uid);
        allow read:   if isOwner(uid);
      }

      // Coach sessions (owner-only, no strict shape)
      match /coach_sessions/{sid} {
        allow read, write: if isOwner(uid);
      }
    }
  }
}
